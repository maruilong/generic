转型和警告
    使用带有泛型类型参数的转型或者instantceof不会有任何效果
    List<Widget> widgets = List<Widget>.class.cast(ois.readObject());//因为擦除的原因无法校验
    List<Widget> widgets = List.class.cast(ois.readObject());

重载
    public class User<K,V>{
        void f(List<K> k){}
        void f(List<V> k){}
    }
    是不能编译的
    因为擦除的原因,重载方法将产生相同的签名

动态类型安全
    可以使用Collections.checkedList 校验1.5之前(或者没有使用边界)的集合

异常
    因为擦除的出现,所以使用将泛型应用到异常处理是非常受限的 catch语句不能捕获泛型类型的异常,因为在编译器和运行时都必须知道异常的确切类型
    泛型类也不能直接或间接继承字Throwable